# Kubernetes CronJob for automated backups and disaster recovery
---
# Daily backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: daily-backup
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: backup
spec:
  schedule: "0 1 * * *"  # Daily at 1 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: oikotie-scraper
            component: backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
          - name: backup
            image: oikotie-scraper:latest
            imagePullPolicy: IfNotPresent
            command:
            - "uv"
            - "run"
            - "python"
            - "-m"
            - "oikotie.automation.backup_manager"
            - "backup"
            - "--type"
            - "full"
            env:
            - name: ENVIRONMENT
              value: "production"
            - name: DATABASE_PATH
              value: "/shared/real_estate.duckdb"
            - name: BACKUP_PATH
              value: "/backups"
            - name: LOG_LEVEL
              value: "INFO"
            - name: BACKUP_ENCRYPTION_ENABLED
              value: "true"
            - name: BACKUP_S3_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: backup-config
                  key: s3-enabled
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-access-key-id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-secret-access-key
                  optional: true
            - name: BACKUP_S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: backup-s3-bucket
                  optional: true
            - name: BACKUP_S3_REGION
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: backup-s3-region
                  optional: true
            volumeMounts:
            - name: shared-data
              mountPath: /shared
            - name: backups
              mountPath: /backups
            - name: backup-config
              mountPath: /app/config/backup
              readOnly: true
            - name: encryption-key
              mountPath: /app/config/encryption
              readOnly: true
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "300m"
          volumes:
          - name: shared-data
            persistentVolumeClaim:
              claimName: scraper-shared-pvc
          - name: backups
            persistentVolumeClaim:
              claimName: scraper-backups-pvc
          - name: backup-config
            configMap:
              name: backup-config
          - name: encryption-key
            secret:
              secretName: backup-encryption-key
              defaultMode: 0600

---
# City-specific backup CronJob for Helsinki
apiVersion: batch/v1
kind: CronJob
metadata:
  name: helsinki-backup
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: backup
    city: helsinki
spec:
  schedule: "30 1 * * *"  # Daily at 1:30 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: oikotie-scraper
            component: backup
            city: helsinki
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
          - name: helsinki-backup
            image: oikotie-scraper:latest
            imagePullPolicy: IfNotPresent
            command:
            - "uv"
            - "run"
            - "python"
            - "-m"
            - "oikotie.automation.backup_manager"
            - "backup"
            - "--type"
            - "city"
            - "--city"
            - "Helsinki"
            env:
            - name: ENVIRONMENT
              value: "production"
            - name: DATABASE_PATH
              value: "/shared/real_estate.duckdb"
            - name: BACKUP_PATH
              value: "/backups"
            - name: LOG_LEVEL
              value: "INFO"
            - name: BACKUP_ENCRYPTION_ENABLED
              value: "true"
            - name: MULTI_CITY_BACKUP_STRATEGY
              value: "separate"
            - name: BACKUP_S3_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: backup-config
                  key: s3-enabled
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-access-key-id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-secret-access-key
                  optional: true
            - name: BACKUP_S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: backup-s3-bucket
                  optional: true
            - name: BACKUP_S3_REGION
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: backup-s3-region
                  optional: true
            volumeMounts:
            - name: shared-data
              mountPath: /shared
            - name: backups
              mountPath: /backups
            - name: backup-config
              mountPath: /app/config/backup
              readOnly: true
            - name: encryption-key
              mountPath: /app/config/encryption
              readOnly: true
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "300m"
          volumes:
          - name: shared-data
            persistentVolumeClaim:
              claimName: scraper-shared-pvc
          - name: backups
            persistentVolumeClaim:
              claimName: scraper-backups-pvc
          - name: backup-config
            configMap:
              name: backup-config
          - name: encryption-key
            secret:
              secretName: backup-encryption-key
              defaultMode: 0600

---
# City-specific backup CronJob for Espoo
apiVersion: batch/v1
kind: CronJob
metadata:
  name: espoo-backup
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: backup
    city: espoo
spec:
  schedule: "45 1 * * *"  # Daily at 1:45 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: oikotie-scraper
            component: backup
            city: espoo
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
          - name: espoo-backup
            image: oikotie-scraper:latest
            imagePullPolicy: IfNotPresent
            command:
            - "uv"
            - "run"
            - "python"
            - "-m"
            - "oikotie.automation.backup_manager"
            - "backup"
            - "--type"
            - "city"
            - "--city"
            - "Espoo"
            env:
            - name: ENVIRONMENT
              value: "production"
            - name: DATABASE_PATH
              value: "/shared/real_estate.duckdb"
            - name: BACKUP_PATH
              value: "/backups"
            - name: LOG_LEVEL
              value: "INFO"
            - name: BACKUP_ENCRYPTION_ENABLED
              value: "true"
            - name: MULTI_CITY_BACKUP_STRATEGY
              value: "separate"
            - name: BACKUP_S3_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: backup-config
                  key: s3-enabled
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-access-key-id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-secret-access-key
                  optional: true
            - name: BACKUP_S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: backup-s3-bucket
                  optional: true
            - name: BACKUP_S3_REGION
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: backup-s3-region
                  optional: true
            volumeMounts:
            - name: shared-data
              mountPath: /shared
            - name: backups
              mountPath: /backups
            - name: backup-config
              mountPath: /app/config/backup
              readOnly: true
            - name: encryption-key
              mountPath: /app/config/encryption
              readOnly: true
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "512Mi"
                cpu: "300m"
          volumes:
          - name: shared-data
            persistentVolumeClaim:
              claimName: scraper-shared-pvc
          - name: backups
            persistentVolumeClaim:
              claimName: scraper-backups-pvc
          - name: backup-config
            configMap:
              name: backup-config
          - name: encryption-key
            secret:
              secretName: backup-encryption-key
              defaultMode: 0600

---
# Incremental backup CronJob (every 6 hours)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: incremental-backup
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: backup
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: oikotie-scraper
            component: backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
          - name: incremental-backup
            image: oikotie-scraper:latest
            imagePullPolicy: IfNotPresent
            command:
            - "uv"
            - "run"
            - "python"
            - "-m"
            - "oikotie.automation.backup_manager"
            - "backup"
            - "--type"
            - "incremental"
            - "--since"
            - "$(date -d '6 hours ago' --iso-8601=seconds)"
            env:
            - name: ENVIRONMENT
              value: "production"
            - name: DATABASE_PATH
              value: "/shared/real_estate.duckdb"
            - name: BACKUP_PATH
              value: "/backups"
            - name: LOG_LEVEL
              value: "INFO"
            - name: BACKUP_ENCRYPTION_ENABLED
              value: "true"
            - name: BACKUP_S3_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: backup-config
                  key: s3-enabled
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-access-key-id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-secret-access-key
                  optional: true
            - name: BACKUP_S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: backup-s3-bucket
                  optional: true
            - name: BACKUP_S3_REGION
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: backup-s3-region
                  optional: true
            volumeMounts:
            - name: shared-data
              mountPath: /shared
            - name: backups
              mountPath: /backups
            - name: backup-config
              mountPath: /app/config/backup
              readOnly: true
            - name: encryption-key
              mountPath: /app/config/encryption
              readOnly: true
            resources:
              requests:
                memory: "128Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: shared-data
            persistentVolumeClaim:
              claimName: scraper-shared-pvc
          - name: backups
            persistentVolumeClaim:
              claimName: scraper-backups-pvc
          - name: backup-config
            configMap:
              name: backup-config
          - name: encryption-key
            secret:
              secretName: backup-encryption-key
              defaultMode: 0600

---
# Backup cleanup CronJob (weekly)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-cleanup
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: backup
spec:
  schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: oikotie-scraper
            component: backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
          - name: backup-cleanup
            image: oikotie-scraper:latest
            imagePullPolicy: IfNotPresent
            command:
            - "uv"
            - "run"
            - "python"
            - "-m"
            - "oikotie.automation.backup_manager"
            - "cleanup"
            env:
            - name: ENVIRONMENT
              value: "production"
            - name: BACKUP_PATH
              value: "/backups"
            - name: LOG_LEVEL
              value: "INFO"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-access-key-id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: aws-secret-access-key
                  optional: true
            - name: BACKUP_S3_BUCKET
              valueFrom:
                secretKeyRef:
                  name: scraper-secrets
                  key: backup-s3-bucket
                  optional: true
            volumeMounts:
            - name: backups
              mountPath: /backups
            - name: backup-config
              mountPath: /app/config/backup
              readOnly: true
            resources:
              requests:
                memory: "64Mi"
                cpu: "25m"
              limits:
                memory: "128Mi"
                cpu: "100m"
          volumes:
          - name: backups
            persistentVolumeClaim:
              claimName: scraper-backups-pvc
          - name: backup-config
            configMap:
              name: backup-config

---
# Disaster recovery monitoring deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: disaster-recovery-monitor
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: disaster-recovery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: oikotie-scraper
      component: disaster-recovery
  template:
    metadata:
      labels:
        app: oikotie-scraper
        component: disaster-recovery
    spec:
      serviceAccountName: disaster-recovery-service-account
      containers:
      - name: disaster-recovery
        image: oikotie-scraper:latest
        imagePullPolicy: IfNotPresent
        command:
        - "uv"
        - "run"
        - "python"
        - "-m"
        - "oikotie.automation.disaster_recovery"
        - "monitor"
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DATABASE_PATH
          value: "/shared/real_estate.duckdb"
        - name: LOG_LEVEL
          value: "INFO"
        - name: REDIS_URL
          value: "redis://redis:6379"
        - name: HEALTH_CHECK_INTERVAL
          value: "5m"
        - name: AUTO_RECOVERY_ENABLED
          value: "true"
        - name: FAILOVER_THRESHOLD
          value: "3"
        - name: ALERT_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: scraper-secrets
              key: alert-webhook-url
              optional: true
        ports:
        - containerPort: 8080
          name: health
        volumeMounts:
        - name: shared-data
          mountPath: /shared
        - name: backups
          mountPath: /backups
        - name: config
          mountPath: /app/config
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: shared-data
        persistentVolumeClaim:
          claimName: scraper-shared-pvc
      - name: backups
        persistentVolumeClaim:
          claimName: scraper-backups-pvc
      - name: config
        configMap:
          name: scraper-config

---
# Service for disaster recovery monitor
apiVersion: v1
kind: Service
metadata:
  name: disaster-recovery-monitor
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: disaster-recovery
spec:
  selector:
    app: oikotie-scraper
    component: disaster-recovery
  ports:
  - port: 8080
    targetPort: 8080
    name: health
  type: ClusterIP

---
# ConfigMap for backup configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-config
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: backup
data:
  backup-config.json: |
    {
      "backup": {
        "enabled": true,
        "retention_days": 7,
        "compression": true,
        "encryption": {
          "enabled": true,
          "algorithm": "AES256",
          "key_rotation_days": 30
        },
        "local": {
          "enabled": true,
          "path": "/backups",
          "compression": true,
          "compression_level": 6
        },
        "s3": {
          "enabled": false,
          "bucket": "",
          "region": "us-east-1",
          "storage_class": "STANDARD_IA",
          "server_side_encryption": true
        },
        "validation": {
          "enabled": true,
          "checksum_algorithm": "SHA256",
          "integrity_check": true,
          "restore_test": false
        },
        "multi_city": {
          "enabled": true,
          "separate_backups": true,
          "cross_city_replication": false
        }
      },
      "disaster_recovery": {
        "enabled": true,
        "rto": "4h",
        "rpo": "1h",
        "automation": {
          "enabled": true,
          "health_check_interval": "5m",
          "failover_threshold": 3,
          "auto_failback": false
        },
        "replication": {
          "enabled": false,
          "regions": [],
          "sync_interval": "1h"
        },
        "testing": {
          "enabled": false,
          "schedule": "0 2 * * 0",
          "test_environment": "staging"
        }
      }
    }
  s3-enabled: "false"

---
# Service account for backup operations
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-service-account
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: backup

---
# Service account for disaster recovery
apiVersion: v1
kind: ServiceAccount
metadata:
  name: disaster-recovery-service-account
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: disaster-recovery

---
# RBAC for backup service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: oikotie-scraper
  name: backup-role
rules:
- apiGroups: [""]
  resources: ["pods", "persistentvolumeclaims"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: backup-role-binding
  namespace: oikotie-scraper
subjects:
- kind: ServiceAccount
  name: backup-service-account
  namespace: oikotie-scraper
roleRef:
  kind: Role
  name: backup-role
  apiGroup: rbac.authorization.k8s.io

---
# RBAC for disaster recovery service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: oikotie-scraper
  name: disaster-recovery-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "patch", "update"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: disaster-recovery-role-binding
  namespace: oikotie-scraper
subjects:
- kind: ServiceAccount
  name: disaster-recovery-service-account
  namespace: oikotie-scraper
roleRef:
  kind: Role
  name: disaster-recovery-role
  apiGroup: rbac.authorization.k8s.io

---
# Cross-city validation backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cross-city-validation-backup
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: backup
    type: validation
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: oikotie-scraper
            component: backup
            type: validation
        spec:
          restartPolicy: OnFailure
          serviceAccountName: backup-service-account
          containers:
          - name: cross-city-validation
            image: oikotie-scraper:latest
            imagePullPolicy: IfNotPresent
            command:
            - "uv"
            - "run"
            - "python"
            - "-m"
            - "oikotie.automation.backup_manager"
            - "validate"
            - "--cross-city"
            - "--cities"
            - "Helsinki,Espoo"
            env:
            - name: ENVIRONMENT
              value: "production"
            - name: DATABASE_PATH
              value: "/shared/real_estate.duckdb"
            - name: BACKUP_PATH
              value: "/backups"
            - name: LOG_LEVEL
              value: "INFO"
            - name: CROSS_CITY_VALIDATION
              value: "true"
            - name: VALIDATION_THRESHOLD
              value: "0.95"
            volumeMounts:
            - name: shared-data
              mountPath: /shared
            - name: backups
              mountPath: /backups
            - name: backup-config
              mountPath: /app/config/backup
              readOnly: true
            resources:
              requests:
                memory: "128Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: shared-data
            persistentVolumeClaim:
              claimName: scraper-shared-pvc
          - name: backups
            persistentVolumeClaim:
              claimName: scraper-backups-pvc
          - name: backup-config
            configMap:
              name: backup-config

---
# Disaster recovery test CronJob (weekly)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: disaster-recovery-test
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: disaster-recovery
spec:
  schedule: "0 4 * * 0"  # Weekly on Sunday at 4 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: oikotie-scraper
            component: disaster-recovery
        spec:
          restartPolicy: OnFailure
          serviceAccountName: disaster-recovery-service-account
          containers:
          - name: disaster-recovery-test
            image: oikotie-scraper:latest
            imagePullPolicy: IfNotPresent
            command:
            - "uv"
            - "run"
            - "python"
            - "-m"
            - "oikotie.automation.disaster_recovery"
            - "test"
            - "--dry-run"
            env:
            - name: ENVIRONMENT
              value: "production"
            - name: DATABASE_PATH
              value: "/shared/real_estate.duckdb"
            - name: LOG_LEVEL
              value: "INFO"
            - name: DR_TEST_MODE
              value: "true"
            - name: MULTI_CITY_DR_TEST
              value: "true"
            volumeMounts:
            - name: shared-data
              mountPath: /shared
            - name: backups
              mountPath: /backups
            - name: config
              mountPath: /app/config
              readOnly: true
            resources:
              requests:
                memory: "128Mi"
                cpu: "50m"
              limits:
                memory: "256Mi"
                cpu: "200m"
          volumes:
          - name: shared-data
            persistentVolumeClaim:
              claimName: scraper-shared-pvc
          - name: backups
            persistentVolumeClaim:
              claimName: scraper-backups-pvc
          - name: config
            configMap:
              name: scraper-config

---
# Secret for backup encryption key
apiVersion: v1
kind: Secret
metadata:
  name: backup-encryption-key
  namespace: oikotie-scraper
  labels:
    app: oikotie-scraper
    component: backup
type: Opaque
data:
  # This should be generated and stored securely
  # echo -n "your-32-byte-encryption-key-here" | base64
  encryption.key: ""